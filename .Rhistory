dates3 <- ifelse(first_half, weather_analyzed[[add_events]]$event_dates_begin,
weather_analyzed[[add_events]]$event_dates)
p <- p +
geom_vline(aes(xintercept = dates, colour = event_type),
data = data.frame(dates = dates3, event_type = "Ice crust 3"),
show.guide = T, linetype = 2) +
# scale_linetype(name = "Events") +
# guides(linetype = guide_legend(override.aes = list(colour = "red")))
}
if(add_events == "events4") {
# dates <- ifelse(first_half, weather_analyzed[[add_events]]$event_dates_begin,
#                 weather_analyzed[[add_events]]$event_dates)
p <- p + geom_vline(aes(xintercept = dates3, colour = "Ice crust 4"), linetype = 2)
}
p +
labs(title = title)
}
# events 3 and 4
dates3 <- ifelse(first_half, weather_analyzed[["events3"]]$event_dates_begin,
weather_analyzed[["events3"]]$event_dates)
#' @param factor_mult numeric, vector. numeric factor to be multipled by each variable (defined
#' in the argument `term`), so that all variables are plotted in the same scale
#' @param cols character or number. vector. sequence of colors for plotting each term, in the same order as term.
#' @param units character. vector. vector of units of each of the terms.
#'
#' @return a ggplot with the terms plotted.
#'
#' @example examples/plot_weather_example.R
#'
#' @export
plot_weather <- function(weather_analyzed,
term = c("snow_depth", "precip", "temp_min", "temp_max", "temp_avg",
"cumulative_precitation", "prec_snow_ratio", "prec_snow_diff",
"snow_prec_ratio", "snow_prec_diff")[c(1,2)],
factor_mult = rep(1, length(term)),
add_events = c("", "events3", "events4")[1],
first_half = TRUE,
cols = c(),
units = c(),
title = "") {
# possible terms
possible_terms <- colnames(weather_analyzed$weather_indices)
# check if any of the terms correspond to more than one possible term, raise an error if it does
# copy weather df
weather_df <- weather_analyzed$weather_indices %>%
dplyr::select(1, which(grepl(paste(term, collapse = "|"), possible_terms)))
# weather_df %>% summary()
weather_df[2:ncol(weather_df)] <- mapply(function(a, b) a*b, weather_df[2:ncol(weather_df)], factor_mult)
# initialize plot
p <- ggplot(weather_df, aes(date)) +
labs(x = "Date", y = "Measure", colour = "Variable")
# add each term if this is an argument of the function
cont <- 1
for(i in term) {
index <- which(grepl(i, possible_terms))[1]
p <- p + geom_line(aes_q(y = as.name(possible_terms[index]),
colour = possible_terms[index]))
if(grepl("ratio", i)) {
col_number <- which(grepl(i, colnames(weather_df)))
p <- p + geom_hline(yintercept = factor_mult[(col_number-1)], linetype = 2)
}
}
# events 3 and 4
dates3 <- ifelse(first_half, weather_analyzed[["events3"]]$event_dates_begin,
weather_analyzed[["events3"]]$event_dates)
dates4 <- ifelse(first_half, weather_analyzed[["events4"]]$event_dates_begin,
weather_analyzed[["events4"]]$event_dates)
events <- data.frame(dates = c(dates, dates4), type = c(rep("Ice crust 3", length(dates3)),
rep("Ice crust 4", length(dates4))))
if(add_events == "events3") {
dates3 <- ifelse(first_half, weather_analyzed[[add_events]]$event_dates_begin,
weather_analyzed[[add_events]]$event_dates)
p <- p +
geom_vline(aes(xintercept = dates, colour = event_type), linetype = 2,
data = events)
# scale_linetype(name = "Events") +
# guides(linetype = guide_legend(override.aes = list(colour = "red")))
}
# if(add_events == "events4") {
#   # dates <- ifelse(first_half, weather_analyzed[[add_events]]$event_dates_begin,
#   #                 weather_analyzed[[add_events]]$event_dates)
#   p <- p + geom_vline(aes(xintercept = dates3, colour = "Ice crust 4"), linetype = 2)
# }
p +
labs(title = title)
}
plot_weather(weather_condition_2019, term = c("snow_de", "cum"), add_events = "events3")
#' @param factor_mult numeric, vector. numeric factor to be multipled by each variable (defined
#' in the argument `term`), so that all variables are plotted in the same scale
#' @param cols character or number. vector. sequence of colors for plotting each term, in the same order as term.
#' @param units character. vector. vector of units of each of the terms.
#'
#' @return a ggplot with the terms plotted.
#'
#' @example examples/plot_weather_example.R
#'
#' @export
plot_weather <- function(weather_analyzed,
term = c("snow_depth", "precip", "temp_min", "temp_max", "temp_avg",
"cumulative_precitation", "prec_snow_ratio", "prec_snow_diff",
"snow_prec_ratio", "snow_prec_diff")[c(1,2)],
factor_mult = rep(1, length(term)),
add_events = c("", "events3", "events4")[1],
first_half = TRUE,
cols = c(),
units = c(),
title = "") {
# possible terms
possible_terms <- colnames(weather_analyzed$weather_indices)
# check if any of the terms correspond to more than one possible term, raise an error if it does
# copy weather df
weather_df <- weather_analyzed$weather_indices %>%
dplyr::select(1, which(grepl(paste(term, collapse = "|"), possible_terms)))
# weather_df %>% summary()
weather_df[2:ncol(weather_df)] <- mapply(function(a, b) a*b, weather_df[2:ncol(weather_df)], factor_mult)
# initialize plot
p <- ggplot(weather_df, aes(date)) +
labs(x = "Date", y = "Measure", colour = "Variable")
# add each term if this is an argument of the function
cont <- 1
for(i in term) {
index <- which(grepl(i, possible_terms))[1]
p <- p + geom_line(aes_q(y = as.name(possible_terms[index]),
colour = possible_terms[index]))
if(grepl("ratio", i)) {
col_number <- which(grepl(i, colnames(weather_df)))
p <- p + geom_hline(yintercept = factor_mult[(col_number-1)], linetype = 2)
}
}
# events 3 and 4
dates3 <- ifelse(first_half, weather_analyzed[["events3"]]$event_dates_begin,
weather_analyzed[["events3"]]$event_dates)
dates4 <- ifelse(first_half, weather_analyzed[["events4"]]$event_dates_begin,
weather_analyzed[["events4"]]$event_dates)
events <- data.frame(dates = c(dates, dates4), event_type = c(rep("Ice crust 3", length(dates3)),
rep("Ice crust 4", length(dates4))))
if(add_events == "events3") {
dates3 <- ifelse(first_half, weather_analyzed[[add_events]]$event_dates_begin,
weather_analyzed[[add_events]]$event_dates)
p <- p +
geom_vline(aes(xintercept = dates, colour = event_type), linetype = 2,
data = events)
# scale_linetype(name = "Events") +
# guides(linetype = guide_legend(override.aes = list(colour = "red")))
}
# if(add_events == "events4") {
#   # dates <- ifelse(first_half, weather_analyzed[[add_events]]$event_dates_begin,
#   #                 weather_analyzed[[add_events]]$event_dates)
#   p <- p + geom_vline(aes(xintercept = dates3, colour = "Ice crust 4"), linetype = 2)
# }
p +
labs(title = title)
}
plot_weather(weather_condition_2019, term = c("snow_de", "cum"), add_events = "events3")
#' @param factor_mult numeric, vector. numeric factor to be multipled by each variable (defined
#' in the argument `term`), so that all variables are plotted in the same scale
#' @param cols character or number. vector. sequence of colors for plotting each term, in the same order as term.
#' @param units character. vector. vector of units of each of the terms.
#'
#' @return a ggplot with the terms plotted.
#'
#' @example examples/plot_weather_example.R
#'
#' @export
plot_weather <- function(weather_analyzed,
term = c("snow_depth", "precip", "temp_min", "temp_max", "temp_avg",
"cumulative_precitation", "prec_snow_ratio", "prec_snow_diff",
"snow_prec_ratio", "snow_prec_diff")[c(1,2)],
factor_mult = rep(1, length(term)),
add_events = c("", "events3", "events4")[1],
first_half = TRUE,
cols = c(),
units = c(),
title = "") {
# possible terms
possible_terms <- colnames(weather_analyzed$weather_indices)
# check if any of the terms correspond to more than one possible term, raise an error if it does
# copy weather df
weather_df <- weather_analyzed$weather_indices %>%
dplyr::select(1, which(grepl(paste(term, collapse = "|"), possible_terms)))
# weather_df %>% summary()
weather_df[2:ncol(weather_df)] <- mapply(function(a, b) a*b, weather_df[2:ncol(weather_df)], factor_mult)
# initialize plot
p <- ggplot(weather_df, aes(date)) +
labs(x = "Date", y = "Measure", colour = "Variable")
# add each term if this is an argument of the function
cont <- 1
for(i in term) {
index <- which(grepl(i, possible_terms))[1]
p <- p + geom_line(aes_q(y = as.name(possible_terms[index]),
colour = possible_terms[index]))
if(grepl("ratio", i)) {
col_number <- which(grepl(i, colnames(weather_df)))
p <- p + geom_hline(yintercept = factor_mult[(col_number-1)], linetype = 2)
}
}
# events 3 and 4
dates3 <- ifelse(first_half, weather_analyzed[["events3"]]$event_dates_begin,
weather_analyzed[["events3"]]$event_dates)
dates4 <- ifelse(first_half, weather_analyzed[["events4"]]$event_dates_begin,
weather_analyzed[["events4"]]$event_dates)
events <- data.frame(dates = c(dates3, dates4), event_type = c(rep("Ice crust 3", length(dates3)),
rep("Ice crust 4", length(dates4))))
if(add_events == "events3") {
dates3 <- ifelse(first_half, weather_analyzed[[add_events]]$event_dates_begin,
weather_analyzed[[add_events]]$event_dates)
p <- p +
geom_vline(aes(xintercept = dates, colour = event_type), linetype = 2,
data = events)
# scale_linetype(name = "Events") +
# guides(linetype = guide_legend(override.aes = list(colour = "red")))
}
# if(add_events == "events4") {
#   # dates <- ifelse(first_half, weather_analyzed[[add_events]]$event_dates_begin,
#   #                 weather_analyzed[[add_events]]$event_dates)
#   p <- p + geom_vline(aes(xintercept = dates3, colour = "Ice crust 4"), linetype = 2)
# }
p +
labs(title = title)
}
plot_weather(weather_condition_2019, term = c("snow_de", "cum"), add_events = "events3")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(witch)
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(forcats)
library(witch)
data(weather_mittadalen)
# plot
ggplot(weather_mittadalen, aes(date)) +
facet_wrap(.~year, scales = "free_x", ncol = 5)+
geom_line(aes(y = snow_depth, color = "Snow depth (mm)"))  +
geom_line(aes(y = prec, color = "Precipitation (mm)")) +
labs(x = "Date", y = "", color = "Measure") +
theme(legend.position = "bottom")
library(ggpubr)
# calculate winter parameters and plot
weather_years <- weather_mittadalen %>%
tidyr::nest(data = c(date, snow_depth, prec, temp_min, temp_max, temp_avg)) %>%
dplyr::mutate(
winter_conditions = purrr::map(data, ~ with(., analyze_weather(date, snow_depth, prec, temp_min, temp_max, temp_avg))),
winter_plots = purrr::map2(winter_conditions, year, ~ plot_weather(.x, term = c("snow_de", "cum"), add_events = "events3",
title = .y)))
# combine plots
ggpubr::ggarrange(plotlist = weather_years$winter_plots, nrow = 3, ncol = 5, common.legend = T)
# plot
weather_years <- weather_years %>%
dplyr::mutate(winter_plots2 = purrr::map2(winter_conditions, year,
~ plot_weather(.x, term = c("snow_de", "cum", "prec_snow_ratio"),
factor_mult = c(0.01, 0.01, 1),
add_events = c("events3", "events4"), title = .y)))
# for each year
for(i in 1:nrow(weather_years)) {
# plot
print(
weather_years$winter_plots2[[i]] +
ylim(0, 4)
)
}
# read expert knowledge data from herders
winter_herders <- read.csv(system.file("extdata/details_winters_mittadalen.csv", package = "witch"), stringsAsFactors = F) %>%
dplyr::as_tibble() %>%
dplyr::mutate_at(c("good_bad_winter", "snow", "construction"), as.factor) %>%
dplyr::mutate_at(vars(contains("date")), lubridate::ymd, tz = "UTC") %>%
dplyr::select(winter, weather = good_bad_winter, construction) %>%
dplyr::mutate(weather = forcats::fct_relevel(weather, "good", after = Inf))
# calculate ice crust events
weather_years <- weather_years %>%
dplyr::mutate(
n_days3 = purrr::map(winter_conditions, ~ n_days(., event = 3)),
n_days4 = purrr::map(winter_conditions, ~ n_days(., event = 4)),
n_events3 = purrr::map(winter_conditions, ~ n_events(., event = 3)),
n_events4 = purrr::map(winter_conditions, ~ n_events(., event = 4)),
duration3 = purrr::map(winter_conditions, ~ duration_event(., event = 3)),
duration4 = purrr::map(winter_conditions, ~ duration_event(., event = 4))
) %>%
tidyr::unnest(n_days3:n_events4)
# plot ice events and herders' classification
weather_years %>%
dplyr::select(year, n_events3:n_events4) %>%
tidyr::pivot_longer(cols = n_events3:n_events4, names_to = "what", values_to = "val") %>%
ggplot(aes(x = year, y = val, color = what)) +
geom_bar(aes(winter, as.numeric(weather)), data = winter_herders, inherit.aes = F,
fill = "grey60", stat = "identity") +
geom_vline(xintercept = first(winter_herders$winter[winter_herders$construction == "during"] - 0.5), linetype = 2, size = 1.1) +
geom_vline(xintercept = first(winter_herders$winter[winter_herders$construction == "after"] - 0.5), linetype = 2, size = 1.1) +
scale_y_continuous(name = "Weather conditions",
breaks = 1:4, labels = levels(winter_herders$weather),
sec.axis =  dup_axis(name = "Number of events",
labels = 1:4)) +
geom_line(size = 1.5) +
labs(colour = "")
weather_years
weather_years %>%
dplyr::select(year, n_events3:n_events4) %>%
tidyr::pivot_longer(cols = n_events3:n_events4, names_to = "what", values_to = "val")
weather_years %>%
dplyr::select(year, n_events3:n_events4)
winter_herders
winter_herders %>%
dplyr::left_join(
weather_years %>%
dplyr::select(year, n_events3:n_events4)
)
winter_herders
winter_herders %>%
dplyr::left_join(
weather_years %>%
dplyr::select(year, n_events3:n_events4),
by = "winter = year"
)
?left_info
?dplyr::left_join
winter_herders %>%
dplyr::left_join(
weather_years %>%
dplyr::select(year, n_events3:n_events4),
by = c("winter" = "year")
)
winter_herders %>%
dplyr::left_join(
weather_years %>%
dplyr::select(year, n_events3:n_events4),
by = c("winter" = "year")
) %>%
knitr::kable()
winter_herders %>%
dplyr::left_join(
weather_years %>%
dplyr::select(year, n_events3:n_events4),
by = c("winter" = "year")
) %>%
dplyr::group_by(winter) %>%
summarize(mean3 = mean(n_events3),
mean4 = mean(n_events4))
winter_herders %>%
dplyr::left_join(
weather_years %>%
dplyr::select(year, n_events3:n_events4),
by = c("winter" = "year")
) %>%
dplyr::group_by(weather) %>%
summarize(mean3 = mean(n_events3),
mean4 = mean(n_events4))
?weather_tassasen
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(forcats)
library(witch)
data(weather_mittadalen)
# plot
ggplot(weather_mittadalen, aes(date)) +
facet_wrap(.~year, scales = "free_x", ncol = 5)+
geom_line(aes(y = snow_depth, color = "Snow depth (mm)"))  +
geom_line(aes(y = prec, color = "Precipitation (mm)")) +
labs(x = "Date", y = "", color = "Measure") +
theme(legend.position = "bottom")
data(weather_tassasen)
# plot
ggplot(weather_tassasen, aes(date)) +
facet_wrap(.~year, scales = "free_x", ncol = 5)+
geom_line(aes(y = snow_depth, color = "Snow depth (mm)"))  +
geom_line(aes(y = prec, color = "Precipitation (mm)")) +
labs(x = "Date", y = "", color = "Measure") +
theme(legend.position = "bottom")
# calculate winter parameters and plot
weather_years <- weather_tassasen %>%
tidyr::nest(data = c(date, snow_depth, prec, temp_min, temp_max, temp_avg)) %>%
dplyr::mutate(
winter_conditions = purrr::map(data, ~ with(., analyze_weather(date, snow_depth, prec, temp_min, temp_max, temp_avg))),
winter_plots = purrr::map2(winter_conditions, year, ~ plot_weather(.x, term = c("snow_de", "cum"), add_events = "events3",
title = .y)))
# combine plots
ggpubr::ggarrange(plotlist = weather_years$winter_plots, nrow = 3, ncol = 5, common.legend = T)
# plot
weather_years <- weather_years %>%
dplyr::mutate(winter_plots2 = purrr::map2(winter_conditions, year,
~ plot_weather(.x, term = c("snow_de", "cum", "prec_snow_ratio"),
factor_mult = c(0.01, 0.01, 1),
add_events = c("events3", "events4"), title = .y)))
# for each year
for(i in 1:nrow(weather_years)) {
# plot
print(
weather_years$winter_plots2[[i]] +
ylim(0, 4)
)
}
# read expert knowledge data from herders
winter_herders <- read.csv(system.file("extdata/details_winters_tassasen.csv", package = "witch"), stringsAsFactors = F) %>%
dplyr::as_tibble() %>%
dplyr::mutate_at(c("good_bad_winter", "snow", "construction"), as.factor) %>%
dplyr::mutate_at(vars(contains("date")), lubridate::ymd, tz = "UTC") %>%
dplyr::select(winter, weather = good_bad_winter, construction) %>%
dplyr::mutate(weather = forcats::fct_relevel(weather, "good", after = Inf))
winter_herders
# calculate ice crust events
weather_years <- weather_years %>%
dplyr::mutate(
n_days3 = purrr::map(winter_conditions, ~ n_days(., event = 3)),
n_days4 = purrr::map(winter_conditions, ~ n_days(., event = 4)),
n_events3 = purrr::map(winter_conditions, ~ n_events(., event = 3)),
n_events4 = purrr::map(winter_conditions, ~ n_events(., event = 4)),
duration3 = purrr::map(winter_conditions, ~ duration_event(., event = 3)),
duration4 = purrr::map(winter_conditions, ~ duration_event(., event = 4))
) %>%
tidyr::unnest(n_days3:n_events4)
# plot ice events and herders' classification
weather_years %>%
dplyr::select(year, n_events3:n_events4) %>%
tidyr::pivot_longer(cols = n_events3:n_events4, names_to = "what", values_to = "val") %>%
ggplot(aes(x = year, y = val, color = what)) +
geom_bar(aes(winter, as.numeric(weather)), data = winter_herders, inherit.aes = F,
fill = "grey60", stat = "identity") +
geom_vline(xintercept = first(winter_herders$winter[winter_herders$construction == "during"] - 0.5), linetype = 2, size = 1.1) +
geom_vline(xintercept = first(winter_herders$winter[winter_herders$construction == "after"] - 0.5), linetype = 2, size = 1.1) +
scale_y_continuous(name = "Weather conditions",
breaks = 1:4, labels = levels(winter_herders$weather),
sec.axis =  dup_axis(name = "Number of events",
labels = 1:4)) +
geom_line(size = 1.5) +
labs(colour = "")
winter_herders
# plot ice events and herders' classification
weather_years %>%
dplyr::select(year, n_events3:n_events4) %>%
tidyr::pivot_longer(cols = n_events3:n_events4, names_to = "what", values_to = "val") %>%
ggplot(aes(x = year, y = val, color = what)) +
geom_bar(aes(winter, as.numeric(weather)), data = winter_herders, inherit.aes = F,
fill = "grey60", stat = "identity") +
geom_vline(xintercept = first(winter_herders$winter[winter_herders$construction == "during"] - 0.5), linetype = 2, size = 1.1) +
geom_vline(xintercept = first(winter_herders$winter[winter_herders$construction == "after"] - 0.5), linetype = 2, size = 1.1) +
scale_y_continuous(name = "Weather conditions",
breaks = 1:4, labels = levels(winter_herders$weather),
sec.axis =  dup_axis(name = "Number of events",
labels = 1:3)) +
geom_line(size = 1.5) +
labs(colour = "")
# plot ice events and herders' classification
weather_years %>%
dplyr::select(year, n_events3:n_events4) %>%
tidyr::pivot_longer(cols = n_events3:n_events4, names_to = "what", values_to = "val") %>%
ggplot(aes(x = year, y = val, color = what)) +
geom_bar(aes(winter, as.numeric(weather)), data = winter_herders, inherit.aes = F,
fill = "grey60", stat = "identity") +
geom_vline(xintercept = first(winter_herders$winter[winter_herders$construction == "during"] - 0.5), linetype = 2, size = 1.1) +
geom_vline(xintercept = first(winter_herders$winter[winter_herders$construction == "after"] - 0.5), linetype = 2, size = 1.1) +
scale_y_continuous(name = "Weather conditions",
breaks = 1:3, labels = levels(winter_herders$weather),
sec.axis =  dup_axis(name = "Number of events",
labels = 1:3)) +
geom_line(size = 1.5) +
labs(colour = "")
# plot ice events and herders' classification
weather_years %>%
dplyr::select(year, n_events3:n_events4) %>%
tidyr::pivot_longer(cols = n_events3:n_events4, names_to = "what", values_to = "val") %>%
ggplot(aes(x = year, y = val, color = what)) +
geom_bar(aes(winter, as.numeric(weather)), data = winter_herders, inherit.aes = F,
fill = "grey60", stat = "identity") +
geom_vline(xintercept = first(winter_herders$winter[winter_herders$construction == "during"] - 0.5), linetype = 2, size = 1.1) +
geom_vline(xintercept = first(winter_herders$winter[winter_herders$construction == "after"] - 0.5), linetype = 2, size = 1.1) +
scale_y_continuous(name = "Weather conditions",
breaks = 1:3, labels = levels(winter_herders$weather),
sec.axis =  dup_axis(name = "Number of events",
labels = 1:4)) +
geom_line(size = 1.5) +
labs(colour = "")
# plot ice events and herders' classification
weather_years %>%
dplyr::select(year, n_events3:n_events4) %>%
tidyr::pivot_longer(cols = n_events3:n_events4, names_to = "what", values_to = "val") %>%
ggplot(aes(x = year, y = val, color = what)) +
geom_bar(aes(winter, as.numeric(weather)), data = winter_herders, inherit.aes = F,
fill = "grey60", stat = "identity") +
geom_vline(xintercept = first(winter_herders$winter[winter_herders$construction == "during"] - 0.5), linetype = 2, size = 1.1) +
geom_vline(xintercept = first(winter_herders$winter[winter_herders$construction == "after"] - 0.5), linetype = 2, size = 1.1) +
scale_y_continuous(name = "Weather conditions",
breaks = 1:3, labels = levels(winter_herders$weather),
sec.axis =  dup_axis(name = "Number of events",
labels = 1:3)) +
geom_line(size = 1.5) +
labs(colour = "")
library(witch)
usethis::use_pkgdown()
usethis::use_github_action(url = "https://raw.githubusercontent.com/r-lib/actions/master/examples/pkgdown.yaml")
library(usethis)
usethis::use_github_action(url = "https://raw.githubusercontent.com/r-lib/actions/master/examples/pkgdown.yaml")
usethis::use_github_action("pkgdown")
install.packages("usethis")
install.packages("usethis")
usethis::use_pkgdown()
usethis::use_github_action("pkgdown")
usethis::use_github_action(url = "https://raw.githubusercontent.com/r-lib/actions/master/examples/pkgdown.yaml")
use_pkgdown_travis()
usethis::use_pkgdown_travis()
pkgdown::build_site()
library(witch)
